
project item trong man hinh editor hoi nho

import 'dart:math';

import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart' as flutter_riverpod;
import 'package:photo_to_pdf/commons/colors.dart';
import 'package:photo_to_pdf/commons/constants.dart';
import 'package:photo_to_pdf/helpers/navigator_route.dart';
import 'package:photo_to_pdf/models/placement.dart';
import 'package:photo_to_pdf/widgets/w_button.dart';
import 'package:photo_to_pdf/widgets/w_matrix_gesture.dart';
import 'package:photo_to_pdf/widgets/w_spacer.dart';
import 'dart:math' as math;


class TestDrag extends flutter_riverpod.ConsumerStatefulWidget {
  const TestDrag({
    super.key,
  });

  @override
  flutter_riverpod.ConsumerState<TestDrag> createState() => _TestDragState();
}

class _TestDragState extends flutter_riverpod.ConsumerState<TestDrag> {
  late Size _size;
  final List<ValueNotifier<Matrix4>> _matrix4Notifiers = [];
  final List<Placement> _listPlacement = [];

  @override
  void initState() {
    super.initState();

    _matrix4Notifiers.add(ValueNotifier(Matrix4.identity()));
    // _matrix4Notifiers.add(ValueNotifier(Matrix4.identity()));
    _listPlacement
        .add(Placement(width: 70, height: 70, alignment: Alignment.center));
    // _listPlacement
    //     .add(Placement(width: 70, height: 70, alignment: Alignment.center));
  }

  @override
  Widget build(BuildContext context) {
    _size = MediaQuery.sizeOf(context);
    return Scaffold(
        resizeToAvoidBottomInset: false,
        body: SafeArea(
            child: Container(
          padding: const EdgeInsets.only(top: 10),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.start,
            children: [_buildCustomArea(() {})],
          ),
        )));
  }

  Widget _buildCustomArea(Function rerenderFunction) {
    return Container(
      padding: const EdgeInsets.symmetric(vertical: 10),
      height: _size.height * 404 / 791 * 0.9,
      width: _size.width,
      decoration: BoxDecoration(
          color: Theme.of(context).cardColor,
          borderRadius: BorderRadius.circular(10)),
      margin: const EdgeInsets.symmetric(horizontal: 10, vertical: 10),
      child: Column(children: [
        Expanded(
            child: Container(
                width: _size.width * 0.8,
                decoration: BoxDecoration(color: colorWhite, boxShadow: [
                  BoxShadow(
                    color: Colors.black.withOpacity(0.2),
                    spreadRadius: 0.5,
                    blurRadius: 5,
                    offset: const Offset(0, 1),
                  ),
                ]),
                margin: const EdgeInsets.symmetric(horizontal: 10),
                child: Stack(
                  children: _matrix4Notifiers.map<Widget>(
                    (e) {
                      final index = _matrix4Notifiers.indexOf(e);
                      return MatrixGestureDetector(
                        onMatrixUpdate: (matrix, translationDeltaMatrix,
                            scaleDeltaMatrix, rotationDeltaMatrix) {
                          setState(() {
                            _matrix4Notifiers[index].value = matrix;
                          });
                          rerenderFunction();
                        },
                        onTap: () {
                          print("$index hehehehe");
                        },
                        child: AnimatedBuilder(
                          animation: _matrix4Notifiers[index],
                          builder: (context, child) {
                            final matrix = _matrix4Notifiers[index].value;
                            final rotationAngle = math.atan2(0, 0);
                            return Transform(
                              transform: matrix,
                              child: Container(
                                color: colorBlue,
                                alignment: _listPlacement[index].alignment,
                                child: FittedBox(
                                  fit: BoxFit.contain,
                                  child: RotatedBox(
                                    quarterTurns:
                                        rotationAngle ~/ (math.pi / 2),
                                    // quarterTurns: 3,
                                    child: Align(
                                      // alignment:
                                      // _listPlacement[index].alignment,
                                      child: Stack(
                                        children: [
                                          Container(
                                            margin: const EdgeInsets.all(7),
                                            child: Image.asset(
                                              "${pathPrefixImage}image_demo.png",
                                              fit: BoxFit.cover,
                                              height:
                                                  _listPlacement[index].height,
                                              width:
                                                  _listPlacement[index].width,
                                            ),
                                          ),
                                          Positioned.fill(
                                              child:
                                                  _buildPanGestureWidget(index))
                                        ],
                                      ),
                                    ),
                                  ),
                                ),
                              ),
                            );
                          },
                        ),
                      );
                    },
                  ).toList(),
                ))),
        WSpacer(height: 10),
        SizedBox(
          width: _size.width * 0.6,
          child: Flex(
            direction: Axis.horizontal,
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Flexible(
                flex: 3,
                child: WButtonFilled(
                  message: "Add Placemnet",
                  textColor: colorBlue,
                  textLineHeight: 14.32,
                  textSize: 12,
                  height: 30,
                  backgroundColor: const Color.fromRGBO(22, 115, 255, 0.08),
                  onPressed: () {},
                  padding: EdgeInsets.zero,
                ),
              ),
              WSpacer(
                width: 10,
              ),
              Flexible(
                flex: 2,
                child: WButtonFilled(
                  message: "Delete",
                  height: 30,
                  textColor: const Color.fromRGBO(255, 63, 51, 1),
                  textLineHeight: 14.32,
                  textSize: 12,
                  backgroundColor: const Color.fromRGBO(255, 63, 51, 0.1),
                  padding: EdgeInsets.zero,
                  onPressed: () {},
                ),
              )
            ],
          ),
        )
      ]),
    );
  }

  Widget _buildPanGestureWidget(int index) {
    return Stack(
      children: [
        Positioned.fill(
            child: Container(
          margin: const EdgeInsets.all(5),
          decoration:
              BoxDecoration(border: Border.all(color: colorBlue, width: 2)),
        )),
        Column(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              crossAxisAlignment: CrossAxisAlignment.center,
              children: [
                // dot top left
                _buildDotDrag(
                  index,
                  20,
                  onPanUpdate: (details) {
                    setState(() {
                      _listPlacement[index].width -= details.delta.dx;
                      _listPlacement[index].height -= details.delta.dy;
                    });
                  },
                  onPanStart: (details) {
                    setState(() {
                      _listPlacement[index].alignment = Alignment.center;
                    });
                  },
                ),
                // dot top center
                _buildDotDrag(
                  index,
                  15,
                  onPanUpdate: (details) {
                    setState(() {
                      _listPlacement[index].height -= details.delta.dy;
                    });
                  },
                  onPanStart: (details) {
                    setState(() {
                      _listPlacement[index].alignment = Alignment.bottomCenter;
                    });
                  },
                ),
                // dot top right
                _buildDotDrag(
                  index,
                  20,
                  onPanUpdate: (details) {
                    setState(() {
                      _listPlacement[index].width += details.delta.dx;
                      _listPlacement[index].height -= details.delta.dy;
                    });
                  },
                  onPanStart: (p0) {
                    setState(() {
                      _listPlacement[index].alignment = Alignment.center;
                    });
                  },
                )
              ],
            ),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              crossAxisAlignment: CrossAxisAlignment.center,
              children: [
                //dot center left
                _buildDotDrag(
                  index,
                  15,
                  margin: const EdgeInsets.only(left: 2),
                  onPanUpdate: (details) {
                    setState(() {
                      _listPlacement[index].width -= details.delta.dx;
                    });
                  },
                  onPanStart: (details) {
                    setState(() {
                      _listPlacement[index].alignment = Alignment.centerRight;
                    });
                  },
                ),
                // dot center right
                _buildDotDrag(
                  index,
                  15,
                  margin: const EdgeInsets.only(right: 2),
                  onPanUpdate: (details) {
                    setState(() {
                      _listPlacement[index].width += details.delta.dx;
                    });
                  },
                  onPanStart: (details) {
                    setState(() {
                      _listPlacement[index].alignment = Alignment.centerLeft;
                    });
                  },
                )
              ],
            ),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              crossAxisAlignment: CrossAxisAlignment.center,
              children: [
                // dot bottom left
                _buildDotDrag(
                  index,
                  20,
                  onPanUpdate: (details) {
                    setState(() {
                      _listPlacement[index].width -= details.delta.dx;
                      _listPlacement[index].height += details.delta.dy;
                    });
                  },
                  onPanStart: (details) {
                    setState(() {
                      _listPlacement[index].alignment = Alignment.center;
                    });
                  },
                ),
                // dot bottom center
                _buildDotDrag(
                  index,
                  15,
                  onPanUpdate: (details) {
                    setState(() {
                      _listPlacement[index].height += details.delta.dy;
                    });
                  },
                  onPanStart: (details) {
                    setState(() {
                      _listPlacement[index].alignment = Alignment.topCenter;
                    });
                  },
                ),
                // dot bottom right
                _buildDotDrag(
                  index,
                  20,
                  onPanUpdate: (details) {
                    setState(() {
                      _listPlacement[index].width += details.delta.dx;
                      _listPlacement[index].height += details.delta.dy;
                    });
                  },
                  onPanStart: (details) {
                    setState(() {
                      _listPlacement[index].alignment = Alignment.center;
                    });
                  },
                )
              ],
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildDotDrag(int index, double size,
      {Function(DragUpdateDetails details)? onPanUpdate,
      void Function(DragStartDetails)? onPanStart,
      Function()? onTap,
      EdgeInsets? margin}) {
    return GestureDetector(
      onPanUpdate: (details) {
        onPanUpdate!(details);
        print("details.delta.dx ${details.delta.dx}");
        print("details.delta.dy ${details.delta.dy}");
      },
      onTap: onTap,
      onPanStart: onPanStart,
      child: Container(
        height: size,
        width: size,
        margin: margin,
        decoration: BoxDecoration(
          color: colorWhite,
          borderRadius: BorderRadius.circular(size / 2),
          border: Border.all(color: colorBlue, width: 2),
        ),
      ),
    );
  }
}
Photo to PDF (Ngày bắt đầu: 18/9)


Task
- [x] Khởi tạo project
- Set up màu
- [x] Màn Home: 
- Các giao diện trong màn hình
- [x] Màn Select Photo 2
- Tạo Bottom sheet
- Nhấn giữ PDF Project

Photo to PDF (Ngày bắt đầu: 19/9)


Task
- [x] Tạo item hiển thị ảnh
- [x] Hoàn thiện màn hình Home
- [x] Màn Select Photo 2
- Tạo Bottom sheet
- Nhấn giữ PDF Project
- 
Photo to PDF (ngày 20/9)
 - tạo các nút action 
 - Thêm bottom sheet create pdf (50%)

Photo to PDF (ngày 21/9)
 - Xây dựng layout editor screen( tiếp )
 - Tạo các options tạo editor layout

 Photo to PDF (ngày 22/9)
- Xây dựng paper size layout
- preview screen

 Photo to PDF (ngày 25/9)
 - Xây dựng options layout : 50%

 Photo to PDF (ngày 26/9)
 - Xây dựng options layout: còn phần backgroundColor
 - Xây dựng options Selected photos options

 Photo to PDF (ngày 27/9)
 - Xây dựng layout cover photos

 Photo to PDF (ngày 28/9)
 - Xây dựng setting screen
 - Xử lý theme mode

 Photo to PDF (ngày 29/9)
 - Xử lý theme mode và background trong options layout

 Photo to PDF (ngày 2/10)
 - Thêm chức năng chọn ảnh, chọn file
 - Xử lý data truyền vào các ui

 Photo to PDF (ngày 3/10)
 - Tiếp tục truyền data vào ui
 - hiển thị các ảnh sau khi truyền data

 Photo to PDF (ngày 4/10)
 - Tính toán việc hiên thị ảnh khi người dùng sử dụng placement 

 Photo to PDF (ngày 6/10)
 - Thêm chức năng tạo pdf, preview pdf



 
